/*
 * rtmp_client.cpp
 *
 *  Created on: 2015-9-28
 *      Author: Max.Chiu
 *      Email: Kingsleyyau@gmail.com
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <signal.h>
#include <time.h>
#include <stdlib.h>

#include <string>
using namespace std;

#include "RtmpClient.h"
#include <common/KThread.h>
#include "../LogManager.h"

#define VERSION_STRING "1.0.0"

#define SERVER_IP "127.0.0.1"
//#define SERVER_IP "192.168.88.152"
#define MAX_CLIENT 1
bool testReconnect = false;
#define RECONN_MAX_TIME_MS (20*1000*1000)
#define RECONN_CHECK_INTERVAL (200*1000)

unsigned char frame0[] = {
		0x17,0x00,0x00,0x00,0x00,0x01,0x42,0x00,0x1f,0xff,0xe1,0x00,0x19,0x67,0x42,0x80,
		0x1f,0x96,0x54,0x16,0x27,0x60,0x2a,0x10,0x00,0x00,0x03,0x00,0x10,0x00,0x00,0x03,
		0x00,0xc9,0xda,0x12,0x26,0xa0,0x01,0x00,0x04,0x68,0xce,0x35,0x20,
};

unsigned char frame1[] = {
		0x17,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x09,0x10,0x00,0x00,0x00,0x0f,0x06,
		0x00,0x01,0xc0,0x01,0x07,0x09,0x08,0x00,0x80,0x00,0x00,0x03,0x00,0x80,0x00,0x00,
		0x00,0xd2,0x65,0x88,0x80,0x40,0x07,0x6c,0x98,0xa0,0x00,0x22,0x47,0x26,0xe4,0xe4,
		0xe4,0xe4,0xc3,0x19,0x6f,0x7d,0xea,0xff,0xc2,0x57,0x89,0xe1,0xee,0x35,0xe5,0x3f,
		0x77,0x77,0xbf,0xff,0x8a,0xb6,0xc7,0x8b,0x19,0x8c,0xcd,0x24,0x61,0x56,0x9e,0xe1,
		0x0c,0x01,0x99,0x25,0x44,0x06,0xb9,0xca,0x99,0x7c,0x5b,0xeb,0x65,0xf2,0x72,0x7f,
		0xfc,0x3f,0x82,0x08,0x36,0x2f,0x77,0x5c,0x9c,0x9c,0x9c,0x9c,0x9c,0x9c,0x76,0x75,
		0xf7,0xfb,0xc4,0x30,0x5f,0x27,0x27,0x26,0xe4,0xe4,0xe4,0xe4,0xe4,0xe4,0xe4,0xf4,
		0xc3,0xff,0xe1,0xed,0x36,0xeb,0x93,0x93,0x93,0x93,0x93,0x93,0x93,0x93,0xf8,0xff,
		0xfc,0x15,0xe0,0x0c,0x0f,0xec,0x82,0x79,0xeb,0xe1,0x52,0x48,0x01,0xb1,0xd9,0x1b,
		0x26,0xf2,0xf7,0xff,0xff,0xfd,0x7e,0x1e,0xce,0xce,0xb9,0x39,0x39,0x39,0x39,0x39,
		0x39,0x39,0x39,0x39,0x39,0x39,0x39,0x39,0x39,0x39,0x39,0x39,0x39,0x38,0xce,0xbc,
		0x3b,0xca,0xf0,0xc6,0x45,0x1f,0xf8,0xf7,0x7f,0x5c,0x04,0x5f,0x4e,0xe1,0xdf,0xe4,
		0x79,0x39,0x39,0x39,0x39,0x39,0x39,0x39,0x39,0x16,0xd7,0x27,0x27,0x27,0x27,0x27,
		0x27,0x27,0x27,0x27,0x27,0x27,0x27,0x27,0x27,0x27,0x27,0x27,0x27,0x27,0x27,0x27,
		0x27,0x27,0x2,0x80,
};

unsigned char frame2[] = {
		0x27,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x09,0x30,0x00,0x00,0x00,0x0c,0x06,
		0x01,0x07,0x09,0x08,0x01,0x80,0x00,0x00,0x03,0x00,0x80,0x00,0x00,0x00,0x54,0x41,
		0x9a,0x02,0x04,0x1d,0xbc,0x0f,0x97,0x17,0x5c,0xbc,0x46,0xba,0xaf,0xa8,0x8f,0x5d,
		0x48,0x41,0xe5,0x0a,0xc1,0xdb,0x19,0x91,0x44,0xcc,0x9f,0x5b,0xff,0xb8,0xe8,0x8f,
		0x66,0x13,0xf1,0x75,0xad,0xf2,0xc6,0x9a,0x23,0xe2,0x38,0x5a,0xb5,0x9b,0xdb,0xaa,
		0xff,0x17,0x28,0x74,0x4f,0xa7,0x27,0xa8,0xae,0x19,0xc9,0xf5,0x1d,0x4c,0x7f,0xc6,
		0x70,0x9f,0xb6,0x4f,0x27,0x8a,0xe6,0xe3,0x0b,0xf9,0xeb,0xaf,0xc7,0x71,0x18,0xbe,
		0x2f,0xc2,0xd0,
};

unsigned char frame3[] = {
		0x17,0x00,0x00,0x00,0x00,0x01,0x42,0x00,0x1f,0xff,0xe1,0x00,0x19,0x67,0x42,0x80,
		0x1f,0x96,0x54,0x16,0x27,0x60,0x2a,0x10,0x00,0x00,0x03,0x00,0x10,0x00,0x00,0x03,
		0x00,0xc9,0xda,0x12,0x26,0xa0,0x01,0x00,0x04,0x68,0xce,0x35,0x20,
};

unsigned char frame4[] = {
		0x17,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x09,0x10,0x00,0x00,0x00,0x0f,0x06,
		0x00,0x01,0xc0,0x01,0x07,0x09,0x08,0x03,0x84,0x00,0x00,0x03,0x00,0x80,0x00,0x00,
		0x05,0xf8,0x65,0x88,0x80,0x20,0x01,0xdb,0xff,0xff,0xd4,0x48,0x00,0x08,0x16,0xe3,
		0xf2,0x28,0xef,0xb6,0x9c,0x9d,0xfe,0xa4,0xdc,0x47,0xef,0xff,0xfb,0xc1,0x0f,0x00,
		0x68,0xde,0x32,0x7e,0x74,0xb8,0xb5,0xce,0xff,0x18,0x8e,0xf7,0x84,0x20,0xa8,0x22,
		0x60,0x41,0xc2,0x51,0xfe,0xc8,0x02,0x8f,0x10,0x74,0x8f,0xc4,0x77,0xcf,0x49,0xa3,
		0xde,0x0b,0xf8,0x6c,0x73,0x46,0xe7,0x06,0x07,0x6d,0x4e,0x2a,0x67,0x4b,0x46,0x06,
		0x48,0x2e,0x7c,0xbf,0x88,0xd7,0x59,0xab,0x94,0xf5,0x9f,0xe7,0xfa,0x1c,0x96,0x92,
		0xb6,0x73,0xb0,0x80,0x70,0xe0,0xae,0x78,0x35,0xe0,0xb1,0x6d,0xf7,0x17,0xef,0x56,
		0xc3,0x8a,0xe0,0x0b,0xe9,0xe3,0x9f,0xd8,0x28,0x8f,0x97,0x7d,0xe4,0x8f,0xf1,0x3f,
		0xf7,0x1b,0xb8,0x8f,0x7f,0xf9,0xb6,0xca,0x0e,0x9d,0xfa,0x62,0x41,0x95,0xfa,0x5c,
		0xc0,0x02,0x1e,0xfe,0x24,0x66,0x5f,0x74,0xcb,0x02,0xa8,0xc0,0x14,0xc1,0x7c,0x46,
		0x58,0xfd,0x9e,0xa7,0xc3,0xa8,0xc6,0x49,0x47,0x8a,0xce,0x29,0x67,0x98,0x6e,0x65,
		0xc3,0x36,0x1f,0xe5,0xa5,0xdf,0x38,0xaa,0xb4,0x0a,0xff,0x7a,0xdb,0xee,0xfb,0xd4,
		0x3d,0x29,0xe4,0x94,0xd4,0x75,0x58,0x8f,0xe9,0x06,0xfc,0x86,0x20,0x07,0xd2,0x68,
		0x77,0x7f,0x82,0x27,0x98,0x24,0x9f,0x80,0x18,0x74,0x7c,0xe1,0x3a,0xd0,0xf7,0xaa,
		0xf9,0xfa,0x40,0x10,0x2d,0xdf,0x77,0xfb,0x69,0xa1,0xc9,0x5c,0x69,0x21,0xa6,0x42,
		0xe3,0x44,0x98,0x87,0x54,0x15,0xbf,0xa6,0x9f,0xf0,0xd9,0x4f,0x27,0x84,0xac,0x62,
		0x0e,0x23,0xf0,0xfe,0x6a,0xcc,0x54,0x15,0x33,0x19,0x3b,0xf3,0x9d,0x3c,0xc4,0x81,
		0xcb,0xd0,0x61,0xf6,0xfc,0x2c,0x57,0xe3,0xa0,0x7d,0x44,0xc5,0x7e,0x7f,0xef,0xf3,
		0xaa,0xeb,0x02,0xff,0xc5,0xf7,0xff,0xfd,0xc4,0x9c,0x4d,0x0d,0xf8,0xbb,0x21,0x25,
		0xa6,0xea,0xf2,0xf6,0x29,0xf7,0x77,0x55,0x77,0x55,0x7d,0x3f,0xc3,0x19,0x87,0x0d,
		0xc4,0x7f,0x88,0x61,0xf1,0xde,0xeb,0x19,0xd3,0xff,0xca,0x92,0x72,0x76,0xf0,0xbf,
		0x80,0xe9,0x19,0x4b,0x00,0x23,0xf1,0x82,0x41,0x83,0xc5,0x1a,0x33,0x8b,0x07,0xf7,
		0xa7,0x91,0xff,0x37,0xff,0xe2,0x3b,0x31,0xea,0xfa,0xf5,0xd4,0x42,0x94,0x7f,0x3d,
		0xa8,0xf3,0x26,0xa3,0xcc,0xbe,0x14,0xff,0xc3,0x9b,0x4a,0x41,0xab,0x0e,0x7e,0x2e,
		0x5a,0xc0,0xe7,0x8e,0xeb,0x01,0xfc,0xa3,0x27,0xa6,0x65,0x93,0xa3,0x5d,0xaf,0x8c,
		0xdc,0xb9,0xfd,0x3f,0xfe,0xdf,0x4e,0xb8,0xd7,0x55,0xf8,0x39,0x35,0x67,0x55,0x29,
		0x31,0x2a,0xd7,0x42,0x19,0x31,0x5f,0xff,0xf6,0xff,0xff,0xe4,0x09,0xfb,0x57,0x69,
		0xaf,0xff,0xf9,0x06,0x77,0x5d,0xc9,0xf8,0x7c,0x0d,0x1f,0xc3,0x86,0xfb,0x11,0x13,
		0xf9,0x12,0x1b,0x16,0x38,0xca,0xdd,0xdf,0xef,0xa8,0x3e,0xbf,0xc5,0xd3,0x52,0xb6,
		0xab,0x37,0xe0,0x51,0x62,0xe8,0xee,0xdb,0xb6,0xbd,0xfc,0x26,0x48,0xd3,0x1e,0xdd,
		0xbf,0x37,0xfd,0x7f,0xff,0xdd,0x0a,0xad,0x55,0x75,0xc6,0x56,0x2f,0xff,0xd1,0xff,
		0xbc,0x15,0xd9,0xa7,0x14,0x02,0x9a,0xe8,0xdc,0x59,0x59,0x1c,0x99,0x38,0xc5,0xbd,
		0xff,0xff,0xfe,0xc4,0xf6,0xcd,0xd8,0x4e,0xbd,0x75,0x73,0x10,0x65,0x59,0x76,0xbd,
		0x3e,0x1a,0x27,0xcf,0xd3,0xb5,0x37,0x89,0xfc,0xbb,0xb7,0x43,0xc9,0xe1,0xd2,0xb1,
		0x77,0xfe,0xff,0x84,0xc3,0x7b,0x71,0x0e,0x7e,0x4e,0xdb,0x3e,0xaf,0xf9,0x18,0x67,
		0x34,0x15,0x65,0x87,0x2f,0x7e,0xd4,0xb5,0xf5,0x93,0xb7,0x5c,0x8b,0x9f,0xed,0x61,
		0xd0,0xaf,0xb6,0x39,0x2d,0xff,0xfd,0xbe,0xc2,0xf3,0xea,0x7b,0xdf,0x6d,0xbd,0x3f,
		0x06,0x2f,0xe3,0x34,0xa2,0xea,0xb3,0x98,0xbb,0xfa,0x66,0xeb,0x68,0x15,0x9c,0x3c,
		0x37,0xe5,0x9d,0x6f,0x7f,0xd7,0xfd,0x72,0xd9,0x66,0xfe,0xf2,0x71,0xd5,0xd5,0x37,
		0x7e,0x4b,0xe8,0x9f,0xd8,0xdc,0x65,0x5b,0xed,0x6f,0x80,0x25,0xfa,0x0a,0xa9,0x4d,
		0xa2,0xed,0x29,0x28,0xc5,0x1f,0x09,0x2d,0x94,0xc0,0x1c,0x45,0xd9,0x4a,0x83,0xa9,
		0x7e,0x01,0x56,0xe4,0xfa,0xaf,0xd6,0x7f,0xff,0x78,0x2e,0xbb,0x63,0x58,0x66,0x7d,
		0xb3,0x1b,0x23,0x8d,0xdf,0x65,0x15,0x4a,0xaa,0x77,0x77,0x9c,0x2a,0x5d,0x0d,0x59,
		0xa1,0x78,0x6b,0xb9,0xbf,0xd7,0xfe,0x9b,0x8f,0xfe,0xf4,0xc2,0x9e,0xfb,0xb3,0x5d,
		0x4a,0xae,0x98,0xa0,0xe9,0x85,0xfb,0xe5,0xd7,0xe5,0x25,0x19,0x49,0x2f,0xe4,0x4a,
		0x5c,0x7e,0x9f,0x66,0x0e,0x96,0x0f,0x7b,0x96,0x78,0x86,0xee,0xa0,0xcb,0xc1,0xdd,
		0x82,0xef,0x2d,0xc8,0x93,0xff,0xff,0x72,0x8b,0xff,0x90,0xb9,0x83,0xfc,0x1d,0xf6,
		0x2d,0x2b,0xdf,0x17,0x50,0xb4,0x3f,0xf7,0x7f,0xf7,0x45,0x3f,0x0d,0x95,0x13,0x2f,
		0xc5,0x7d,0xb6,0x9f,0xfb,0x04,0x17,0xb7,0x9f,0xff,0xb3,0x5a,0xc4,0x2b,0x7d,0x28,
		0xd1,0x9f,0x37,0xbd,0x91,0xdc,0x3b,0x9b,0xc2,0xb8,0x00,0xc0,0x6b,0x26,0x6a,0x0d,
		0xff,0xbc,0xbe,0x6f,0xe5,0x84,0x8f,0xa1,0x49,0x7c,0xef,0xff,0xfd,0x84,0xf2,0x77,
		0xa3,0x76,0xf2,0x13,0xff,0xff,0xbd,0x08,0xa9,0x5a,0x9a,0x99,0xf4,0xe9,0x14,0xd6,
		0xdf,0x5d,0xeb,0xbf,0xc8,0xe4,0x22,0x52,0x47,0x69,0xc3,0x2d,0xbf,0xc1,0x14,0x8c,
		0xb7,0x23,0xfd,0x1e,0xa0,0x1d,0xec,0x2b,0x97,0xb7,0xfb,0x7f,0xf0,0x2e,0xac,0x99,
		0xfa,0xd7,0x48,0xb9,0xbf,0x20,0x4d,0x7d,0x33,0xe6,0x40,0xc6,0xec,0x03,0xfa,0xbb,
		0xb7,0xfb,0xba,0xbe,0x5d,0xbf,0xff,0x85,0xf2,0x01,0xb1,0x19,0xb0,0x25,0x55,0x16,
		0x31,0x40,0xdf,0x99,0x9f,0xfa,0x19,0x93,0x72,0xa8,0x6e,0x7a,0xf1,0x27,0x49,0xf4,
		0xd5,0x52,0x4d,0x45,0x24,0xea,0x05,0xf7,0x46,0x3b,0x1a,0xcc,0xfa,0x0f,0x35,0x59,
		0x4e,0xb8,0xea,0x3d,0xba,0xff,0xa5,0x10,0x56,0x80,0x99,0xc9,0xa6,0xa6,0x4b,0x1a,
		0x7f,0xf4,0xce,0xdb,0x33,0x3a,0x66,0x66,0x13,0xe4,0x5e,0xed,0xff,0xcf,0xe5,0x4f,
		0xb3,0xea,0x6f,0x33,0x7d,0x46,0x6a,0x4f,0xeb,0xff,0xc8,0x75,0x56,0x1d,0xda,0x00,
		0x51,0x4a,0x63,0x22,0x0d,0xc1,0x1d,0xe9,0x12,0x05,0x0f,0xcf,0xba,0xad,0x88,0x01,
		0x9b,0xae,0x38,0xc8,0x9f,0xac,0x07,0x06,0x37,0xc1,0x10,0x4c,0x67,0x3e,0x44,0x67,
		0x98,0xda,0x9f,0xf4,0xfe,0x9a,0xc1,0xe5,0xe6,0xe3,0x54,0x7a,0xe9,0xfe,0x7f,0xe3,
		0xf4,0x79,0x6d,0xfb,0xf4,0xbe,0x3c,0x90,0x2d,0x9e,0x1f,0xf3,0x6e,0x9a,0x78,0xfc,
		0x07,0x69,0xca,0xff,0xf6,0xdb,0xc2,0x18,0x01,0xc0,0x00,0x51,0x68,0xc5,0xc1,0xca,
		0x5f,0xf0,0x62,0xf8,0x42,0x92,0xb6,0x79,0x6b,0x07,0x1b,0xff,0xf3,0xfc,0x4f,0xa5,
		0xa4,0x5c,0x7f,0xa1,0x8f,0xf8,0x7c,0x4d,0xac,0xd2,0x35,0xd9,0xc7,0xe3,0x79,0xb5,
		0xc1,0xeb,0xaa,0x32,0xde,0x2f,0x86,0xef,0xff,0xf9,0x2e,0xf8,0x2a,0xa5,0x2a,0x2e,
		0x94,0x09,0x3b,0x9a,0x5d,0x1f,0xd6,0xff,0xd0,0x82,0x2e,0x22,0x54,0x7a,0xeb,0x2b,
		0x58,0xa9,0xd6,0x8d,0xe6,0xad,0x35,0x90,0x42,0xd4,0x8b,0x76,0xe2,0x65,0x5c,0x3c,
		0xdb,0xa2,0x37,0x40,0xdd,0xb8,0x39,0xc5,0x59,0xd8,0xe0,0xd4,0x6a,0x88,0x2a,0x9f,
		0xff,0xf0,0x26,0xfa,0x7b,0xba,0x61,0x8c,0xfa,0xe3,0x27,0x83,0xfb,0x89,0x39,0x72,
		0x6e,0x71,0xbf,0xd7,0xe0,0x1f,0xfe,0x2e,0x8d,0xfb,0x76,0x2f,0xcd,0x9c,0xb9,0x0b,
		0x92,0x06,0xe7,0xe5,0xce,0x24,0xc0,0x5d,0xde,0x5b,0xcb,0x0c,0xcd,0x27,0xa1,0xa7,
		0xd5,0x8a,0x91,0x44,0x11,0xcf,0xfc,0xba,0x3b,0x2c,0x3d,0x48,0xde,0x74,0x07,0xdf,
		0x73,0x0f,0x85,0xe7,0xf9,0xd0,0x5f,0x36,0x89,0x26,0xa4,0x89,0x14,0x20,0x76,0xe3,
		0xff,0xae,0x3f,0x7f,0xbf,0xc5,0x5f,0x5d,0x0a,0xc6,0xe9,0xb3,0xaa,0xfe,0xff,0x1f,
		0xae,0x9a,0x7f,0xfd,0xb2,0xe3,0x7f,0x90,0xdc,0x89,0xcb,0xe5,0xf1,0x41,0x05,0xf0,
		0x23,0xd6,0xb3,0x80,0x00,0x87,0x0f,0x41,0x75,0xa9,0x23,0x39,0xca,0x70,0x9e,0x71,
		0xb4,0x9b,0xab,0x4a,0x2a,0x7f,0xff,0xf9,0x63,0xb5,0xaa,0xa4,0x6c,0x36,0x44,0xa3,
		0xc9,0xef,0x8b,0x7f,0xbe,0xbf,0x1b,0x52,0x9d,0xa0,0x00,0x43,0x7f,0xbb,0x52,0xfe,
		0x75,0x8d,0x70,0x4e,0x83,0x49,0xd9,0x7b,0x56,0xeb,0x7e,0x40,0x61,0xfa,0xe5,0x7e,
		0xc6,0x5a,0x17,0x7c,0x6b,0xdf,0x35,0x2e,0x3c,0x93,0x33,0xff,0x26,0xfa,0xbc,0x5b,
		0x8f,0x9d,0xac,0x7d,0x3d,0x3e,0x10,0x50,0x09,0x45,0x70,0xd0,0x5f,0xb4,0xfb,0xdb,
		0xdb,0x7b,0xc7,0xa8,0x14,0x50,0x65,0xbb,0xb6,0xf0,0xa6,0x5b,0x65,0xaf,0xfb,0x77,
		0x71,0xbf,0xff,0x4f,0x0e,0x2f,0xb5,0x5a,0xaa,0x55,0xaf,0xbe,0xef,0xfe,0xbb,0xfc,
		0x26,0x6c,0x4c,0x62,0x7b,0xe6,0xef,0xd5,0xff,0x8f,0x50,0xd1,0x8a,0x5b,0xdb,0xff,
		0xe5,0x24,0x9b,0xe1,0xed,0x69,0x07,0x5c,0x49,0x80,0xca,0x97,0x2f,0x03,0x1d,0x51,
		0xd7,0x9b,0xec,0x92,0x1f,0x77,0x7b,0xfd,0xff,0x52,0x4d,0xd9,0x3b,0x5d,0x69,0x1f,
		0x1c,0xb9,0x55,0x55,0xff,0x4e,0xfd,0x93,0xa5,0xda,0xc6,0x75,0x15,0xa3,0xa3,0x69,
		0x75,0xe3,0xce,0x14,0xff,0x76,0x25,0x40,0xf1,0x97,0x89,0xe3,0x56,0x24,0xb0,0xee,
		0xc9,0x7d,0x47,0xb8,0x02,0x3c,0xd9,0x46,0x15,0x6f,0x6d,0xba,0x7a,0x69,0xe9,0xc2,
		0xb8,0x03,0x08,0x0c,0xb2,0xaa,0xaf,0xed,0xe9,0xef,0xff,0xea,0x11,0x50,0x42,0x51,
		0xd5,0x7f,0xfe,0xb6,0xa1,0xc5,0x2a,0x3d,0x42,0xc9,0x70,0xfa,0x7f,0xfa,0x61,0x12,
		0x40,0x3f,0xd7,0x4e,0xa7,0xff,0xf9,0x5c,0x6d,0xa2
};

unsigned char frame5[] = {
		0x17,0x00,0x00,0x00,0x00,0x01,0x42,0x00,0x1f,0xff,0xe1,0x00,0x19,0x67,0x42,0x80,
		0x1f,0x96,0x54,0x16,0x27,0x60,0x2a,0x10,0x00,0x00,0x03,0x00,0x10,0x00,0x00,0x03,
		0x00,0xc9,0xda,0x12,0x26,0xa0,0x01,0x00,0x04,0x68,0xce,0x35,0x20,
};

unsigned char frame6[] = {
		0x17,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x09,0x10,0x00,0x00,0x00,0x0f,0x06,
		0x00,0x01,0xc0,0x01,0x07,0x09,0x08,0x01,0x88,0x00,0x00,0x03,0x00,0x80,0x00,0x00,
		0x06,0x20,0x65,0x88,0x80,0x08,0x00,0x1d,0xbf,0x6e,0x9e,0x09,0x4a,0x88,0x00,0x01,
		0x01,0x4c,0x54,0xaf,0xca,0xc7,0xfc,0xac,0x35,0x67,0xf8,0xba,0x8f,0x2f,0x5c,0x70,
		0x03,0x1c,0x01,0xf3,0xc5,0xf3,0xdc,0xed,0x52,0xb0,0xd4,0x74,0x79,0x6b,0x56,0xab,
		0xf5,0xf5,0xcd,0x0b,0x18,0x18,0x6c,0xda,0xb8,0xf8,0x4f,0x00,0xcc,0x28,0x16,0x9c,
		0xcd,0x69,0xe9,0xa7,0x51,0xf7,0x7e,0xbf,0x7a,0xff,0xbc,0x5f,0x7e,0xec,0xcb,0xc9,
		0xf6,0xfc,0x55,0x09,0xe6,0x07,0x79,0x56,0xf2,0x62,0xc6,0x10,0xc0,0x01,0xfd,0xb4,
		0x63,0x5b,0x07,0x6a,0x2b,0xff,0x03,0x1d,0x47,0x1f,0x95,0x75,0xc7,0x7f,0x5a,0x60,
		0xfb,0xe4,0xf0,0x79,0x71,0xf7,0xdb,0x41,0xb8,0xfe,0xe4,0xef,0xb3,0x34,0x5f,0xab,
		0x30,0x39,0x43,0x5b,0x29,0x6a,0x48,0x0a,0x9c,0x3e,0xa2,0x8c,0x42,0x7e,0x55,0x25,
		0xec,0x8b,0xff,0x77,0xfe,0x50,0x29,0x6a,0xaf,0x07,0x73,0x49,0x7b,0x27,0xe3,0xb9,
		0x3f,0x25,0x7e,0xf0,0xdd,0x41,0x27,0x2d,0xbd,0xb9,0xd0,0x9e,0x01,0x35,0x8d,0x7e,
		0x60,0xa0,0x21,0xa6,0x7f,0xb7,0xf1,0xdf,0xbe,0xb9,0xee,0x6f,0x48,0xe9,0xe6,0xf7,
		0xff,0x76,0xfc,0x8b,0xab,0x68,0x8d,0x24,0xc1,0x96,0xbe,0x32,0xb6,0x8f,0xc4,0x57,
		0x45,0x1c,0x3c,0xa6,0xfd,0x6e,0x26,0x97,0x60,0xc2,0x93,0x82,0x6b,0xe6,0x05,0x5c,
		0xea,0xff,0x2d,0xca,0x44,0x01,0x1d,0x68,0x01,0x95,0x44,0x64,0xa0,0x42,0x71,0xd5,
		0x6f,0x43,0x60,0xac,0xf4,0x78,0x3f,0x71,0x9b,0xee,0xb5,0xca,0xf2,0x09,0x88,0x3c,
		0x06,0x5a,0x06,0x00,0x74,0x80,0xf0,0x23,0x28,0xcc,0xce,0xc2,0x4c,0x49,0xb1,0x73,
		0xee,0x8e,0x22,0x7f,0xfb,0x6d,0x09,0x7e,0x7f,0x13,0xe3,0xa0,0xb9,0xfc,0xa1,0x13,
		0x95,0x21,0x06,0x83,0xa6,0xac,0xe4,0xf1,0x77,0x18,0xc6,0xfe,0xbd,0xff,0xd3,0xef,
		0xf5,0x7b,0x8e,0xb4,0xba,0xa9,0x68,0x6f,0x37,0xb7,0x63,0xb3,0x6d,0x37,0xee,0xd3,
		0x07,0x5f,0x53,0xed,0xd2,0x97,0xe5,0x26,0xc9,0xbe,0x2e,0x5b,0x6d,0x95,0x3b,0x86,
		0x49,0x00,0x02,0xfd,0x14,0xbb,0x18,0xf4,0xa8,0x4b,0xbb,0xba,0xa3,0x37,0x7f,0x83,
		0xee,0xda,0xff,0xa2,0x9f,0x6f,0xa7,0xf9,0x34,0xbb,0x8b,0xd2,0x8c,0x31,0x71,0x0c,
		0x77,0xa6,0x90,0xca,0xd8,0x59,0x68,0x36,0xca,0xe9,0x51,0x8c,0xe4,0xdc,0x83,0xe1,
		0x41,0x51,0xd3,0x19,0x33,0x41,0xaf,0xbc,0x24,0x55,0x3e,0xde,0x8b,0xb1,0x9e,0x79,
		0xa1,0xfd,0x09,0x19,0x4f,0xc5,0x7c,0xda,0xa8,0xfc,0x9c,0xf3,0x38,0x84,0x9c,0x02,
		0x21,0x22,0x28,0x06,0x1d,0xe1,0x63,0x56,0x24,0x11,0xe9,0xdb,0x97,0x24,0xdc,0x96,
		0x7f,0x2f,0xfb,0x89,0x13,0xef,0xe5,0xc8,0xf5,0xd7,0x9b,0xaa,0x24,0x28,0xd0,0x22,
		0x7a,0x8c,0xac,0xba,0x89,0xcb,0x24,0xbd,0x3e,0x45,0xcb,0xb3,0x5c,0x64,0xde,0x91,
		0xed,0xab,0xf5,0x36,0x89,0x13,0xc4,0x3b,0x93,0xa4,0xa5,0x5a,0x08,0x03,0xaa,0x56,
		0x17,0xe5,0xf0,0x16,0xc0,0x41,0xff,0x7d,0x77,0xfc,0x32,0x48,0xc1,0x95,0x46,0x3b,
		0xe6,0xcc,0x69,0xd3,0xc7,0xf4,0x54,0xf6,0xef,0x94,0xb6,0x23,0xff,0xff,0xfc,0xb7,
		0xb9,0x04,0x6f,0x5a,0x51,0x0f,0x03,0x37,0x26,0xb7,0xd1,0x1a,0x86,0x49,0x00,0x1b,
		0x43,0x5a,0x9a,0x55,0x46,0xe3,0x7d,0xdc,0xe6,0x4f,0xfc,0xda,0x4c,0xfb,0x67,0x3a,
		0x0e,0xff,0x29,0xbc,0x2a,0x9a,0x7c,0x29,0x88,0xc3,0x44,0xe9,0xd5,0x7d,0xd7,0xde,
		0x7f,0x08,0x5b,0x67,0x49,0xae,0xf1,0x79,0x47,0xdd,0x7b,0x46,0xc7,0x03,0xba,0x5f,
		0xed,0xc2,0xe4,0xb8,0x12,0x7a,0x17,0x1e,0x75,0xca,0xa9,0xb6,0x21,0xde,0x9e,0x30,
		0x66,0x77,0x22,0xee,0x62,0x4e,0xe3,0x2f,0x17,0xdf,0xb0,0x9b,0x63,0xcf,0x03,0xe6,
		0xae,0xc5,0xd9,0xa9,0xf3,0x68,0x5b,0xb1,0xdf,0x62,0xc1,0xdb,0xe9,0xa7,0xdb,0xef,
		0x8f,0xf6,0x15,0x65,0xea,0x44,0xf6,0x91,0x61,0x75,0xb2,0x9d,0x42,0x1e,0x6f,0x59,
		0xee,0x39,0xf9,0x69,0xe3,0xc8,0xab,0xdf,0x15,0xbe,0x5b,0xd0,0xf1,0x3c,0x1d,0x5e,
		0xa6,0x0d,0x26,0xb0,0xc0,0x9a,0xd5,0x76,0xcb,0x70,0x80,0x55,0xf7,0x77,0xb4,0x8b,
		0x42,0xb5,0xa3,0x2c,0x4c,0x54,0xa3,0xab,0x0a,0x88,0x6e,0x31,0xb7,0x03,0xbc,0xaf,
		0xf2,0x18,0xc6,0xc7,0xd9,0x3b,0xdf,0xc5,0xe5,0x1d,0x48,0xde,0xdb,0xb6,0xc7,0xf8,
		0xec,0x28,0xf9,0x92,0xd9,0x5b,0x88,0x2e,0xba,0x58,0xcf,0x92,0x64,0x1f,0xb9,0xd4,
		0x64,0xe4,0xfc,0x0b,0x76,0xdc,0x8a,0xd9,0x38,0x60,0xae,0x59,0x6d,0x9e,0x8e,0xac,
		0x4e,0xa4,0x97,0x3c,0xbc,0x0d,0xde,0x0d,0xf7,0xed,0xd8,0x9c,0x89,0x9d,0xaf,0x6a,
		0x32,0xbd,0xa4,0xee,0x2d,0x01,0xb8,0x7d,0xb4,0xcc,0x38,0xf0,0x65,0x5a,0x60,0x54,
		0xad,0x71,0x28,0xcc,0x87,0x72,0x77,0x7e,0xd7,0x37,0xb5,0x62,0x1e,0xa5,0x92,0xe6,
		0xe5,0x26,0x4e,0xba,0x6b,0x98,0xa8,0xd1,0xf6,0xb9,0x77,0x76,0xd9,0x00,0x16,0x40,
		0xb9,0x14,0x31,0x97,0xa6,0x03,0x0b,0x23,0x1e,0x04,0x79,0x9a,0xf3,0x8e,0x65,0x01,
		0x62,0x40,0x0f,0x43,0xb6,0x0b,0x29,0x10,0x8f,0x8f,0x16,0xc1,0x47,0x3a,0x91,0x51,
		0xd1,0x60,0x35,0x1c,0xdd,0xd8,0x41,0x7d,0x5e,0xc2,0x79,0x04,0x9f,0x6f,0x46,0xf9,
		0x74,0xab,0xc6,0x95,0x86,0x14,0x9c,0x84,0x8b,0x19,0x5f,0x80,0xf6,0x5c,0xa6,0x56,
		0x44,0x1d,0x9b,0xe2,0x4f,0x77,0xe4,0xff,0xc1,0xc8,0xf0,0xe7,0x06,0x3b,0x1a,0x3f,
		0x05,0x1e,0xc5,0xe2,0xdb,0x2a,0xdb,0xb3,0x03,0x8e,0x97,0x6d,0x2c,0xd4,0x75,0x8e,
		0x63,0x01,0x4d,0x9b,0x5a,0xff,0xbf,0x27,0x12,0x7f,0xac,0x62,0xc5,0xc7,0xe9,0x21,
		0xf3,0x57,0x2c,0x45,0xc6,0x59,0xd7,0x69,0x55,0x63,0x2b,0xbe,0x21,0xc3,0x01,0xdc,
		0x51,0x7f,0xe8,0x38,0x64,0xe4,0xf9,0x15,0xe7,0x0e,0x69,0xdd,0xb1,0x17,0xc6,0x5c,
		0x10,0xf3,0x9c,0xbb,0x73,0x8c,0x12,0xa9,0x29,0xe3,0xf4,0x97,0xe5,0xe4,0x49,0x77,
		0x81,0xdd,0x2b,0x96,0x52,0x5d,0x1b,0x23,0x91,0xcc,0x13,0x4a,0x46,0xb8,0x7c,0xd7,
		0x8d,0xab,0xc9,0xc8,0xb2,0xfd,0xeb,0x51,0xa4,0x07,0xda,0x9c,0x3c,0x3e,0xd5,0xb4,
		0xa1,0x54,0xdc,0xe0,0x3c,0xd2,0x1b,0xf8,0xed,0x87,0x6f,0x17,0xf7,0xfb,0x48,0xab,
		0xfd,0x75,0xa5,0xb2,0xe3,0x77,0x0b,0xd4,0xb4,0xa8,0x77,0xd8,0xdd,0x93,0x5f,0x80,
		0x72,0x07,0x2d,0x48,0xad,0x1f,0xbc,0x0c,0x4d,0x75,0x1b,0x95,0xac,0x53,0x08,0xf6,
		0x3f,0xae,0x24,0xac,0xd8,0xe1,0xf3,0x52,0x3e,0x15,0x50,0x02,0xdb,0x94,0x9d,0xb1,
		0x4d,0xfe,0xd6,0x97,0xa4,0x55,0x32,0x6c,0x78,0x86,0x55,0x9e,0x35,0x3f,0x1c,0x5f,
		0x89,0x90,0x63,0x00,0x12,0xd0,0x1e,0xd2,0x36,0x02,0xd3,0xcf,0xfc,0x61,0x7d,0x62,
		0xca,0x55,0xb6,0x2a,0xf0,0x63,0xf0,0x3b,0xfa,0xdf,0xbb,0x6a,0x7e,0x0b,0xe1,0x19,
		0xf0,0xd9,0x93,0x2b,0xfc,0x49,0xff,0x5b,0xdf,0x94,0x88,0x77,0x4a,0x9b,0xff,0xa1,
		0x2f,0x33,0x3d,0x28,0x27,0x65,0x43,0xcd,0x14,0x2b,0x29,0xbd,0x72,0xa2,0x1e,0xb5,
		0x1d,0xc9,0x9d,0xf6,0xa3,0xbf,0x6e,0x70,0xf2,0x66,0x93,0x70,0x86,0xde,0x3e,0x52,
		0xbf,0x12,0xb8,0xdd,0x63,0x5e,0x61,0xab,0x1b,0xfa,0x54,0x1e,0x6e,0x04,0x12,0x3d,
		0x3b,0x99,0xfd,0x2f,0xe3,0xbb,0xe5,0xfe,0xad,0xc2,0xe3,0x79,0xcf,0xb8,0x99,0xb9,
		0xe3,0xdb,0x73,0xbe,0x9c,0x11,0x8b,0xbf,0xd8,0xff,0x29,0x17,0x6a,0x7c,0xb5,0x46,
		0xb7,0xb4,0xb1,0x3c,0x04,0x31,0x76,0x5c,0xa4,0x32,0xbd,0xf2,0x2e,0x7c,0x69,0xad,
		0xe4,0x2f,0x57,0xed,0x42,0xf5,0x93,0xf9,0x1e,0xe3,0x14,0x3f,0xb4,0xc0,0xcc,0x58,
		0x08,0x15,0xde,0x45,0x13,0xc7,0x63,0x7e,0x8d,0x5f,0xc9,0x8e,0xcc,0xfc,0xf8,0xfc,
		0xaa,0xac,0x55,0x66,0x31,0xff,0xf3,0x99,0x15,0xd4,0x36,0x3b,0xc9,0x7a,0xed,0xfd,
		0x55,0x25,0x24,0x1f,0xf1,0x1e,0xa0,0x21,0x75,0x22,0x1f,0x7f,0xfc,0x7e,0x94,0x9a,
		0xa1,0x4e,0x76,0xbf,0x6d,0xb4,0xed,0x9a,0x97,0x1e,0xaa,0x23,0xd6,0x28,0x8b,0xa9,
		0xcd,0x99,0x36,0x83,0xf3,0xe1,0xf1,0xc8,0x44,0x90,0x10,0xd1,0xa1,0x7d,0xcd,0x7a,
		0x21,0xa7,0xa7,0x5d,0x7e,0x9a,0x6d,0xa6,0x9b,0x62,0xac,0x22,0xa0,0x1a,0xbc,0x45,
		0xe7,0xf1,0xff,0x4e,0xdb,0x67,0xe7,0xf5,0xd7,0xfe,0xef,0x7f,0x74,0xef,0x56,0x9c,
		0xd8,0x6c,0x76,0x7b,0x44,0xa4,0xff,0xbb,0xdf,0xfd,0x28,0xd7,0x9d,0x4c,0x94,0x1a,
		0xf1,0x6a,0x99,0xb3,0xc7,0x3d,0xd4,0xe3,0x54,0x45,0xff,0xf6,0xde,0xb6,0x8d,0x85,
		0xeb,0x8b,0xea,0x7d,0x9a,0x4a,0xa3,0x01,0x43,0x42,0x82,0xa4,0x80,0x1d,0x5f,0xc6,
		0x60,0x17,0xfc,0x4f,0xf6,0xff,0xdb,0xe3,0xbb,0xef,0xd4,0xbf,0xb5,0xd4,0xd8,0xca,
		0x5a,0x3d,0xeb,0xf6,0xb3,0x5f,0xbf,0xff,0x45,0xde,0xd8,0xf7,0x2b,0x5d,0x2f,0xaf,
		0x82,0x7e,0xa0,0xfc,0x57,0xa6,0x4c,0x6d,0xdc,0xfe,0x1b,0x25,0x63,0xc9,0x07,0xac,
		0xfe,0xdf,0xdb,0xe3,0x1f,0xff,0x91,0xda,0xb7,0x48,0xf8,0x3f,0xff,0x49,0xf6,0xbf,
		0xfe,0x3f,0xdd,0x97,0x3f,0x52,0x67,0x36,0x45,0x84,0xd4,0x14,0xd2,0xd4,0xff,0x6d,
		0xba,0x7f,0xd2,0xa8,0x03,0xf6,0x24,0x95,0x02,0x2a,0x03,0xd1,0x1a,0x1f,0xd8,0x3f,
		0xfc,0xaf,0x94,0xa5,0xf9,0x6e,0xcd,0x72,0xc8,0x9f,0x5c,0xa5,0xf3,0x35,0x8e,0x31,
		0xce,0x4e,0x5f,0xff,0x41,0x2b,0xb3,0xd7,0x93,0x93,0x91,0x6d,0x6d,0x6d,0x64,0x59,
		0x1e,0x27,0x1e,0xff,0x47,0x60,0xf5,0xf5,0xfa,0xd7,0xe4,0xe4,0x79,0x39,0x39,0x39,
		0x39,0x38,0x8f,0xd3,0x39,0x7f,0x44,0x92,0x14,0x16,0x5d,0x27,0x27,0x23,0xc9,0xc9,
		0xc9,0xc9,0xc4,0x6e,0x54,0x9c,0x91,0x95,0x1d,0xd1,0x24,0x81,0x4a,0x0e,0xb3,0xa5,
		0xc5,0x70
};

unsigned int timestamps[] = {
		0,
		0,
		190,
		168,
		0,
		262,
		0,
		298,
};

bool gStart = false;
void SignalFunc(int sign_no);

RtmpClient client[MAX_CLIENT];
KThread* clientThreads[MAX_CLIENT];

KThread sendVideoThread[MAX_CLIENT];
KThread heartBeatThread[MAX_CLIENT];

class SendHeartBeatRunnable : public KRunnable {
public:
	SendHeartBeatRunnable(RtmpClient *container) {
		mContainer = container;
	}
	virtual ~SendHeartBeatRunnable() {
		mContainer = NULL;
	}
protected:
	void onRun() {
		unsigned int timestamp = 0;
		unsigned int start = 0, end = 0;

		while( mContainer->IsConnected() ) {
			if( !mContainer->SendHeartBeat() ) {
				break;
			}

			sleep(10);
		}

		LogManager::GetLogManager()->Log(
				LOG_MSG,
				"SendHeartBeatRunnable::onRun( "
				"tid : %d, "
				"[Disconnected], "
				"index : '%d' "
				")",
				(int)syscall(SYS_gettid),
				mContainer->GetIndex()
				);
		mContainer->Close();
	}
private:
	RtmpClient *mContainer;
};

class SendVideoRunnable : public KRunnable {
public:
	SendVideoRunnable(RtmpClient *container) {
		mContainer = container;
	}
	virtual ~SendVideoRunnable() {
		mContainer = NULL;
	}
protected:
	void onRun() {
		unsigned int timestamp = 0;
		unsigned int start = 0, end = 0;

		while( mContainer->IsConnected() ) {
			start = timestamp;
			timestamp += timestamps[0];
			if( !mContainer->SendVideoData((const char* )frame0, sizeof(frame0), timestamp) ) {
				break;
			}

			timestamp += timestamps[1];
			if( !mContainer->SendVideoData((const char* )frame1, sizeof(frame1), timestamp) ) {
				break;
			}

			timestamp += timestamps[2];
			if( !mContainer->SendVideoData((const char* )frame2, sizeof(frame2), timestamp) ) {
				break;
			}

			timestamp += timestamps[3];
			if( !mContainer->SendVideoData((const char* )frame3, sizeof(frame3), timestamp) ) {
				break;
			}

			timestamp += timestamps[4];
			if( !mContainer->SendVideoData((const char* )frame4, sizeof(frame4), timestamp) ) {
				break;
			}

			timestamp += timestamps[5];
			if( !mContainer->SendVideoData((const char* )frame5, sizeof(frame5), timestamp) ) {
				break;
			}

			timestamp += timestamps[6];
			if( !mContainer->SendVideoData((const char* )frame6, sizeof(frame6), timestamp) ) {
				break;
			}

			timestamp += timestamps[7];

			end = timestamp - start;
			usleep(end * 1000);

		}

		LogManager::GetLogManager()->Log(
				LOG_MSG,
				"SendVideoRunnable::onRun( "
				"tid : %d, "
				"[Disconnected], "
				"index : '%d' "
				")",
				(int)syscall(SYS_gettid),
				mContainer->GetIndex()
				);
		mContainer->Close();
	}
private:
	RtmpClient *mContainer;
};

class ClientRunnable : public KRunnable {
public:
	ClientRunnable(RtmpClient *container) {
		mContainer = container;
	}
	virtual ~ClientRunnable() {
		mContainer = NULL;
	}
protected:
	void onRun() {
		while( gStart ) {
			if( mContainer->Connect(SERVER_IP) ) {
				// 开始心跳线程
				SendHeartBeatRunnable* pHeartBeatRunable = new SendHeartBeatRunnable(client);
				heartBeatThread[client->GetIndex()].start(pHeartBeatRunable);

				RtmpPacket recvPacket;
				while( mContainer->RecvRtmpPacket(&recvPacket) ) {
					RTMP_PACKET_TYPE type = mContainer->ParseRtmpPacket(&recvPacket);
					recvPacket.FreeBody();
				}

				// 停止发送视频线程
				KRunnable* pRunable = sendVideoThread[mContainer->GetIndex()].stop();
				if( pRunable ) {
					delete pRunable;
				}

				// 停止心跳线程
				pRunable = heartBeatThread[mContainer->GetIndex()].stop();
				if( pRunable ) {
					delete pRunable;
				}

				LogManager::GetLogManager()->Log(
						LOG_WARNING,
						"ClientRunnable::onRun( "
						"tid : %d, "
						"[Disconnect], "
						"index : '%d' "
						")",
						(int)syscall(SYS_gettid),
						mContainer->GetIndex()
						);

			} else {
				// 连接失败
				client->Close();
			}

			int randtime = rand() % RECONN_MAX_TIME_MS;
			while (randtime > 0 && gStart) {
				int waittime = (randtime > RECONN_CHECK_INTERVAL ? RECONN_CHECK_INTERVAL : randtime);
				randtime -= waittime;
				usleep(waittime);
			}
		}

	}

private:
	RtmpClient *mContainer;
};

class RtmpClientListenerImp : public RtmpClientListener {
public:
	void OnConnect(RtmpClient* client, const string& sessionId) {
		LogManager::GetLogManager()->Log(
				LOG_WARNING,
				"RtmpClientListenerImp::OnConnect( "
				"tid : %d, "
				"index : '%d', "
				"sessionId : '%s', "
				"client : %p "
				")",
				(int)syscall(SYS_gettid),
				client->GetIndex(),
				sessionId.c_str(),
				client
				);

		char temp[1024];
		sprintf(temp, "WW%d@%s", client->GetIndex(), SERVER_IP);
		client->Login(temp, "123456", "1", "sid=SESSION123456&userType=1");
	}

	void OnDisconnect(RtmpClient* client) {
		LogManager::GetLogManager()->Log(
				LOG_WARNING,
				"RtmpClientListenerImp::OnDisconnect( "
				"tid : %d, "
				"index : '%d', "
				"client : %p "
				")",
				(int)syscall(SYS_gettid),
				client->GetIndex(),
				client
				);
	}

	void OnLogin(RtmpClient* client, bool bSuccess) {
		LogManager::GetLogManager()->Log(
				LOG_WARNING,
				"RtmpClientListenerImp::OnLogin( "
				"tid : %d, "
				"index : '%d', "
				"bSuccess : %d, "
				"user : '%s', "
				"client : %p "
				")",
				(int)syscall(SYS_gettid),
				client->GetIndex(),
				bSuccess,
				client->GetUser().c_str(),
				client
				);

		if( bSuccess ) {
			char temp[1024];
			sprintf(temp, "WW%d|||PC0|||1", client->GetIndex());
			client->MakeCall(temp);
			client->CreatePublishStream();
		}
	}
	void OnMakeCall(RtmpClient* client, bool bSuccess, const string& channelId) {
		LogManager::GetLogManager()->Log(
				LOG_WARNING,
				"RtmpClientListenerImp::OnMakeCall( "
				"tid : %d, "
				"index : '%d', "
				"bSuccess : %d, "
				"user : '%s', "
				"channelId : '%s', "
				"client : %p "
				")",
				(int)syscall(SYS_gettid),
				client->GetIndex(),
				bSuccess,
				client->GetUser().c_str(),
				channelId.c_str(),
				client
				);
	}
	void OnCreatePublishStream(RtmpClient* client) {
		LogManager::GetLogManager()->Log(
				LOG_WARNING,
				"RtmpClientListenerImp::OnCreatePublishStream( "
				"tid : %d, "
				"index : '%d', "
				"user : '%s', "
				"client : %p "
				")",
				(int)syscall(SYS_gettid),
				client->GetIndex(),
				client->GetUser().c_str(),
				client
				);

		sendVideoThread[client->GetIndex()].start(new SendVideoRunnable(client));
	}

	void OnHangup(RtmpClient* client, const string& channelId, const string& cause) {
		LogManager::GetLogManager()->Log(
				LOG_WARNING,
				"RtmpClientListenerImp::OnHangup( "
				"tid : %d, "
				"index : '%d', "
				"user : '%s', "
				"channelId : '%s', "
				"client : %p "
				")",
				(int)syscall(SYS_gettid),
				client->GetIndex(),
				client->GetUser().c_str(),
				channelId.c_str(),
				cause.c_str(),
				client
				);

		// 停止发送视频
		KRunnable* pSendVideoRunable = sendVideoThread[client->GetIndex()].stop();
		if( pSendVideoRunable ) {
			delete pSendVideoRunable;
		}

		// retry MakeCall
		char temp[1024];
		sprintf(temp, "WW%d|||PC0|||1", client->GetIndex());
		client->MakeCall(temp);
	}

	void OnHeartBeat(RtmpClient* client) {
		LogManager::GetLogManager()->Log(
				LOG_WARNING,
				"RtmpClientListenerImp::OnHeartBeat( "
				"tid : %d, "
				"index : '%d' "
				")",
				(int)syscall(SYS_gettid),
				client->GetIndex()
				);
	}
};
RtmpClientListenerImp gRtmpClientListenerImp;

int main(int argc, char *argv[]) {
	printf("############## rtmp client ############## \n");
	printf("# Version : %s \n", VERSION_STRING);
	printf("# Build date : %s %s \n", __DATE__, __TIME__ );
	srand(time(0));

	/* Ignore */
	struct sigaction sa;
	sa.sa_handler = SIG_IGN;
	sigemptyset(&sa.sa_mask);
	sigaction(SIGPIPE, &sa, 0);

	/* Handle */
	memset(&sa, 0, sizeof(sa));
	sa.sa_handler = SignalFunc;
	sa.sa_flags = SA_RESTART;
	sigemptyset(&sa.sa_mask);

//	sigaction(SIGHUP, &sa, 0);
	sigaction(SIGINT, &sa, 0); // Ctrl-C
	sigaction(SIGQUIT, &sa, 0);
	sigaction(SIGILL, &sa, 0);
	sigaction(SIGABRT, &sa, 0);
	sigaction(SIGFPE, &sa, 0);
	sigaction(SIGBUS, &sa, 0);
	sigaction(SIGSEGV, &sa, 0);
	sigaction(SIGSYS, &sa, 0);
	sigaction(SIGTERM, &sa, 0);
	sigaction(SIGXCPU, &sa, 0);
	sigaction(SIGXFSZ, &sa, 0);

	LogManager::GetLogManager()->Start(LOG_WARNING, "log");
	LogManager::GetLogManager()->SetDebugMode(true);

	gStart = true;
	for(int i = 0; i < MAX_CLIENT; i++) {
		client[i].SetRtmpClientListener(&gRtmpClientListenerImp);
		client[i].SetIndex(i);
		ClientRunnable* runnable = new ClientRunnable(&(client[i]));
		clientThreads[i] = new KThread();
		clientThreads[i]->start(runnable);

		usleep(100 * 1000);
	}

	// test reconnect
	if (testReconnect) {
		sleep(30);
                srand(time(NULL));
		while (gStart) {
			for (int i = 0; i < MAX_CLIENT && gStart; i++) {
				int randtime = rand() % RECONN_MAX_TIME_MS;
				while (randtime > 0 && gStart) {
					int waittime = (randtime > RECONN_CHECK_INTERVAL ? RECONN_CHECK_INTERVAL : randtime);
					randtime -= waittime;
					usleep(waittime);
				}
				client[i].Close();
			}
		}
	}

	for(int i = 0; i < MAX_CLIENT; i++) {
		clientThreads[i]->stop();
	}

	printf("# All threads exit \n");
//	while( true ) {
//		sleep(1);
//	}

	return EXIT_SUCCESS;
}

void SignalFunc(int sign_no) {
	LogManager::GetLogManager()->Log(LOG_ERR_SYS, "main( Get signal : %d )", sign_no);
	LogManager::GetLogManager()->LogFlushMem2File();

	gStart = false;
	switch(sign_no) {
	default:{
		for(int i = 0; i < MAX_CLIENT; i++) {
			client[i].Shutdown();
		}

		for(int i = 0; i < MAX_CLIENT; i++) {
			clientThreads[i]->stop();
		}

		printf("# All threads exit \n");

		exit(EXIT_SUCCESS);
	}break;
	}
}
